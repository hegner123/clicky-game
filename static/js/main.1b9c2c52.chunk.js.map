{"version":3,"sources":["Components/Grid/index.js","Components/Header/index.js","Components/Navbar/index.js","Components/Display/index.js","Components/Cards/index.js","Components/Score/index.js","Pages/Game.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","children","className","Row","Col","size","styles","split","map","join","Header","Navbar","props","Display","Card","src","image","alt","onClick","clicked","id","Score","score","topScore","Game","state","friends","playState","guesses","includes","console","log","setState","push","shuffle","sort","a","b","Math","random","this","Cards","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAKO,SAASA,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,yBAAKC,UAAS,mBAAcF,EAAQ,SAAW,KAAOC,GAIxD,SAASE,EAAT,GAAmC,IAApBH,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3B,OAAO,yBAAKC,UAAS,aAAQF,EAAQ,SAAW,KAAOC,GAKlD,SAASG,EAAT,GAA0C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQL,EAAY,EAAZA,SAClC,OACE,yBACEC,UAAWG,EACRE,MAAM,KACNC,KAAI,SAAAH,GAAI,MAAI,OAASA,KACrBI,KAAK,KAAO,IAAMH,GAEpBL,GCZQS,MAVf,WACE,OACF,yBAAKR,UAAU,2BACb,yBAAKA,UAAU,yBACb,8CCSWS,MAbf,SAAgBC,GAIZ,OACE,yBAAKV,UAAU,iDACb,0BAAMA,UAAU,gBAAhB,eACCU,EAAMX,WCEAY,MATf,SAAiBD,GACf,OACE,yBAAKV,UAAU,OACZU,EAAMX,WCUEa,MAXf,SAAcF,GAEZ,OAEA,yBAAKV,UAAU,oCACf,yBAAKa,IAAKH,EAAMI,MAAOd,UAAU,aAAae,IAAI,MAAMC,QAAS,kBAAMN,EAAMO,QAAQP,EAAMQ,S,OCI9EC,MAXf,SAAeT,GACb,OACE,yBAAKV,UAAU,WACb,yBAAKA,UAAU,WACb,8BAAM,0CAAwBU,EAAMU,OAClC,0BAAMpB,UAAU,QAAO,6CAA2BU,EAAMW,aCwEnDC,E,2MAtEbC,MAAQ,CACNC,QAASA,EACTC,UAAU,OACVL,MAAO,EACPC,SAAU,EACVK,QAAQ,EACRT,QAAS,I,EAGXA,QAAU,SAAAC,GAAO,IACTD,EAAY,EAAKM,MAAjBN,QACAG,EAAU,EAAKG,MAAfH,MACAC,EAAa,EAAKE,MAAlBF,SACHJ,EAAQU,SAAST,IACnBU,QAAQC,IAAIZ,GACZW,QAAQC,IAAI,QACRT,EAAQC,GACX,EAAKS,SAAS,CAACT,SAAUD,IACzB,EAAKU,SAAS,CAACV,MAAM,IACrB,EAAKU,SAAS,CAACb,QAAS,OAExB,EAAKa,SAAS,CAACV,MAAM,IACrB,EAAKU,SAAS,CAACb,QAAS,QAGzB,EAAKa,SAAS,CAACV,MAAOA,EAAO,IACzBA,EAAQC,GACX,EAAKS,SAAS,CAACT,SAAUD,IAG1BQ,QAAQC,IAAIT,GACZQ,QAAQC,IAAIR,GACbJ,EAAQc,KAAKb,IAEd,EAAKc,W,EAGNA,QAAU,kBAAM,EAAKT,MAAMC,QAAQS,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,a,wEAEpD,IAAD,OACN,OACE,6BACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEjB,MAAOkB,KAAKf,MAAMH,MAClBC,SAAWiB,KAAKf,MAAMF,YAG1B,kBAAC,EAAD,MACA,kBAACxB,EAAD,KACA,kBAACI,EAAD,KACE,kBAACC,EAAD,CAAKC,KAAK,MACV,kBAAC,EAAD,KACCmC,KAAKf,MAAMC,QAAQlB,KAAI,SAAAkB,GAAO,OAC7B,kBAACe,EAAD,CACEtB,QAAS,EAAKA,QACdC,GAAIM,EAAQN,GACZsB,IAAKhB,EAAQN,GACbJ,MAAOU,EAAQV,oB,GA3DR2B,aCCJC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1b9c2c52.chunk.js","sourcesContent":["import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, styles, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \") + \" \" + styles} \n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Header(){\n  return(\n<div className=\"container-fluid p-0 m-0\">\n  <div className=\"jumbotron text-center\">\n    <h1>Clicky Game</h1>\n  </div>\n</div>\n  )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Navbar(props){\n\n\n   \n    return(\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <span className=\"navbar-brand\">Clicky Game</span>\n        {props.children}\n      </nav>\n  )\n    }\n\n\nexport default Navbar\n","import React from 'react';\n\nfunction Display(props){\n  return(\n    <div className=\"row\">\n      {props.children}\n    </div>\n  )\n}\n\n\nexport default Display","import React from \"react\";\n\n\n\nfunction Card(props){\n\n  return(\n\n  <div className=\"col-12 col-md-4 text-center mt-5\">\n  <img src={props.image} className=\"img-fluid \" alt=\"...\" onClick={() => props.clicked(props.id)}/>\n</div>\n)\n  };\n\n\nexport default Card;\n\n\n","import React from \"react\";\n\nfunction Score(props){\n  return(\n    <div className=\"ml-auto\">\n      <div className=\"ml-auto\">\n        <span><strong>Score:</strong>{props.score}</span>\n          <span className=\"ml-5\"><strong>TopScore:</strong>{props.topScore}</span>\n        </div>\n      </div>\n  )\n};\n\nexport default Score;","import React, { Component} from 'react';\nimport {Col, Row, Container } from \"../Components/Grid\";\nimport Header from \"../Components/Header\";\nimport Navbar from \"../Components/Navbar\";\nimport Display from \"../Components/Display\";\nimport Cards from \"../Components/Cards\";\nimport friends from \"../friends.json\";\nimport Score from \"../Components/Score\";\nclass Game extends Component {\n  state = {\n    friends: friends,\n    playState:\"none\",\n    score: 0,\n    topScore: 0,\n    guesses:3,\n    clicked: []\n  };\n\n  clicked = id => {\n    let { clicked } = this.state;\n    let { score } = this.state;\n    let { topScore } = this.state;\n   if (clicked.includes(id)){\n     console.log(clicked);\n     console.log(\"fuck\");\n     if (score > topScore){\n      this.setState({topScore: score})\n      this.setState({score:0})\n      this.setState({clicked: []})\n     } else {\n      this.setState({score:0})\n      this.setState({clicked: []})\n     }\n   } else {\n     this.setState({score: score +1})\n     if (score > topScore){\n      this.setState({topScore: score})\n      \n     };\n     console.log(score)\n     console.log(topScore)\n    clicked.push(id);\n   };\n   this.shuffle();\n  }\n\n  shuffle = () => this.state.friends.sort((a, b) => 0.5 - Math.random());\n\n  render(){\n    return(\n      <div>\n      <Navbar>\n        <Score\n          score={this.state.score}\n          topScore ={this.state.topScore}\n        />\n      </Navbar>\n      <Header />\n      <Container>\n      <Row>\n        <Col size=\"12\">\n        <Display>\n        {this.state.friends.map(friends => (\n          <Cards\n            clicked={this.clicked}\n            id={friends.id}\n            key={friends.id}\n            image={friends.image}\n          />\n        ))}\n        </Display>\n        </Col>\n      </Row>\n  </Container>\n  </div>\n    )\n  }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from \"./Pages/Game\"\n\nfunction App(){\n  return(\n    <Game/>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}